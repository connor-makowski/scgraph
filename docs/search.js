window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "scgraph", "modulename": "scgraph", "kind": "module", "doc": "<h1 id=\"scgraph\">scgraph</h1>\n\n<p><a href=\"https://badge.fury.io/py/scgraph\"><img src=\"https://badge.fury.io/py/scgraph.svg\" alt=\"PyPI version\" /></a>\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\" /></a>\n<a href=\"https://pypi.org/project/scgraph/\"><img src=\"https://img.shields.io/pypi/dm/scgraph.svg?label=PyPI%20downloads\" alt=\"PyPI Downloads\" /></a></p>\n\n<p>Supply chain graph package for Python</p>\n\n<p><img src=\"https://raw.githubusercontent.com/connor-makowski/scgraph/main/static/scgraph.png\" alt=\"scgraph\" /></p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>Getting Started: <a href=\"https://github.com/connor-makowski/scgraph\">https://github.com/connor-makowski/scgraph</a></p>\n\n<p>Low Level: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html\">https://connor-makowski.github.io/scgraph/scgraph/core.html</a></p>\n\n<h2 id=\"key-features\">Key Features</h2>\n\n<ul>\n<li>Calculate the shortest path between two points on earth using a latitude / longitude pair\n<ul>\n<li>Inputs:\n<ul>\n<li>A latitude / longitude pair for the origin</li>\n<li>A latitude / longitude pair for the destination</li>\n</ul></li>\n<li>Calculation:\n<ul>\n<li>Algorithms:\n<ul>\n<li>Dijkstra's algorithm (Modified for sparse networks)\n<ul>\n<li>Modified to support sparse network data structures</li>\n</ul></li>\n<li>Makowski's Modified Sparse Dijkstra algorithm\n<ul>\n<li>Modified for O(n) performance on particularly sparse networks</li>\n</ul></li>\n<li>Possible future support for other algorithms</li>\n</ul></li>\n<li>Distances:\n<ul>\n<li>Uses the <a href=\"https://en.wikipedia.org/wiki/Haversine_formula\">haversine formula</a> to calculate the distance between two points on earth</li>\n</ul></li>\n</ul></li>\n<li>Returns:\n<ul>\n<li><code>path</code>:\n<ul>\n<li>A list of dictionaries (<code>latitude</code> and <code>longitude</code>) that make up the shortest path</li>\n</ul></li>\n<li><code>length</code>:\n<ul>\n<li>The distance in kilometers between the two points</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li>Antimeridian support</li>\n<li>Arbitrary start and end points</li>\n<li>Arbitrary network data sets</li>\n<li>Grid based graphs</li>\n<li>Cached shortest path calculations for very fast repetative calculations to or from the same point in a graph.\n<ul>\n<li>Note: Geographs are not yet supported for this feature</li>\n</ul></li>\n</ul>\n\n<h2 id=\"setup\">Setup</h2>\n\n<p>Make sure you have Python 3.10.x (or higher) installed on your system. You can download it <a href=\"https://www.python.org/downloads/\">here</a>.</p>\n\n<p>Note: Support for python3.6-python3.9 is available up to version 2.2.0.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<pre><code>pip install scgraph\n</code></pre>\n\n<h2 id=\"use-with-google-colab\">Use with Google Colab</h2>\n\n<ul>\n<li><a href=\"https://colab.research.google.com/github/connor-makowski/scgraph/blob/main/examples/getting_started.ipynb\">Getting Started</a></li>\n<li><a href=\"https://colab.research.google.com/github/connor-makowski/scgraph/blob/main/examples/multi_path_geojson.ipynb\">Creating A Multi Path Geojson</a></li>\n<li><a href=\"https://colab.research.google.com/github/connor-makowski/scgraph/blob/main/examples/geograph_modifications.ipynb\">Modifying A Geograph</a></li>\n</ul>\n\n<h1 id=\"getting-started\">Getting Started</h1>\n\n<h2 id=\"basic-usage\">Basic Usage</h2>\n\n<p>Get the shortest path between two points on earth using a latitude / longitude pair\nIn this case, calculate the shortest maritime path between Shanghai, China and Savannah, Georgia, USA.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"c1\"># Use a maritime network geograph</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scgraph.geographs.marnet</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">marnet_geograph</span>\n\n<span class=\"c1\"># Get the shortest path between</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">marnet_geograph</span><span class=\"o\">.</span><span class=\"n\">get_shortest_path</span><span class=\"p\">(</span>\n    <span class=\"n\">origin_node</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;latitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">31.23</span><span class=\"p\">,</span><span class=\"s2\">&quot;longitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">121.47</span><span class=\"p\">},</span>\n    <span class=\"n\">destination_node</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;latitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">32.08</span><span class=\"p\">,</span><span class=\"s2\">&quot;longitude&quot;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">81.09</span><span class=\"p\">},</span>\n    <span class=\"n\">output_units</span><span class=\"o\">=</span><span class=\"s1\">&#39;km&#39;</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Length: &#39;</span><span class=\"p\">,</span><span class=\"n\">output</span><span class=\"p\">[</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">])</span> <span class=\"c1\">#=&gt; Length:  19596.4653</span>\n</code></pre>\n</div>\n\n<p>In the above example, the <code>output</code> variable is a dictionary with three keys: <code>length</code> and <code>coordinate_path</code>.</p>\n\n<ul>\n<li><code>length</code>: The distance between the passed origin and destination when traversing the graph along the shortest path\n<ul>\n<li>Notes:\n<ul>\n<li>This will be in the units specified by the <code>output_units</code> parameter.</li>\n<li><code>output_units</code> options:\n<ul>\n<li><code>km</code> (kilometers - default)</li>\n<li><code>m</code> (meters)</li>\n<li><code>mi</code> (miles)</li>\n<li><code>ft</code> (feet)</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><code>coordinate_path</code>: A list of lists [<code>latitude</code>,<code>longitude</code>] that make up the shortest path</li>\n</ul>\n\n<p>For more examples including viewing the output on a map, see the <a href=\"https://colab.research.google.com/github/connor-makowski/scgraph/blob/main/examples/getting_started.ipynb\">example notebook</a>.</p>\n\n<h2 id=\"included-geographs\">Included GeoGraphs</h2>\n\n<ul>\n<li>marnet_geograph:\n<ul>\n<li>What: A maritime network data set from searoute</li>\n<li>Use: <code>from scgraph.geographs.marnet import marnet_geograph</code></li>\n<li>Attribution: <a href=\"https://github.com/genthalili/searoute-py\">searoute</a></li>\n<li>Length Measurement: Kilometers</li>\n<li><a href=\"https://raw.githubusercontent.com/connor-makowski/scgraph/main/static/marnet.png\">Marnet Picture</a></li>\n</ul></li>\n<li>oak_ridge_maritime_geograph:\n<ul>\n<li>What: A maritime data set from the Oak Ridge National Laboratory campus</li>\n<li>Use: <code>from scgraph.geographs.oak_ridge_maritime import oak_ridge_maritime_geograph</code></li>\n<li>Attribution: <a href=\"https://www.ornl.gov/\">Oak Ridge National Laboratory</a> with data from <a href=\"http://geocommons.com/datasets?id=25\">Geocommons</a></li>\n<li>Length Measurement: Kilometers</li>\n<li><a href=\"https://raw.githubusercontent.com/connor-makowski/scgraph/main/static/oak_ridge_maritime.png\">Oak Ridge Maritime Picture</a></li>\n</ul></li>\n<li>north_america_rail_geograph:\n<ul>\n<li>What: Class 1 Rail network for North America</li>\n<li>Use: <code>from scgraph.geographs.north_america_rail import north_america_rail_geograph</code></li>\n<li>Attribution: <a href=\"https://geodata.bts.gov/datasets/usdot::north-american-rail-network-lines-class-i-freight-railroads-view/about\">U.S. Department of Transportation: ArcGIS Online</a></li>\n<li>Length Measurement: Kilometers</li>\n<li><a href=\"https://raw.githubusercontent.com/connor-makowski/scgraph/main/static/north_america_rail.png\">North America Rail Picture</a></li>\n</ul></li>\n<li>us_freeway_geograph:\n<ul>\n<li>What: Freeway network for the United States</li>\n<li>Use: <code>from scgraph.geographs.us_freeway import us_freeway_geograph</code></li>\n<li>Attribution: <a href=\"https://hub.arcgis.com/datasets/esri::usa-freeway-system-over-1500k/about\">U.S. Department of Transportation: ArcGIS Online</a></li>\n<li>Length Measurement: Kilometers</li>\n<li><a href=\"https://raw.githubusercontent.com/connor-makowski/scgraph/main/static/us_freeway.png\">US Freeway Picture</a></li>\n</ul></li>\n<li><code>scgraph_data</code> geographs:\n<ul>\n<li>What: Additional geographs are available in the <code>scgraph_data</code> package\n<ul>\n<li>Note: These include larger geographs like the world highways geograph and world railways geograph.</li>\n</ul></li>\n<li>Installation: <code>pip install scgraph_data</code></li>\n<li>Use: <code>from scgraph_data.world_highways import world_highways_geograph</code></li>\n<li>See: <a href=\"https://github.com/connor-makowski/scgraph_data\">scgraph_data</a> for more information and all available geographs.</li>\n</ul></li>\n</ul>\n\n<h2 id=\"gridgraph-usage\">GridGraph usage</h2>\n\n<p>Example:</p>\n\n<ul>\n<li>Create a grid of 20x100 cells.\n<ul>\n<li>This creates a grid based graph with connections to all 8 neighbors for each grid item.</li>\n<li>Each grid item has 4 cardinal connections at length 1 and 4 diagonal connections at length sqrt(2)</li>\n</ul></li>\n<li>Create a wall from (10,5) to (10,99).\n<ul>\n<li>This would foce any path to go to the bottom of the graph to get around the wall.</li>\n</ul></li>\n<li>Get the shortest path between (2,10) and (18,10)\n<ul>\n<li>Note: The length of this path should be 16 without the wall and 20.9704 with the wall.</li>\n</ul></li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scgraph</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">GridGraph</span>\n\n<span class=\"n\">x_size</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">y_size</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">y_size</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># Create the GridGraph object</span>\n<span class=\"n\">gridGraph</span> <span class=\"o\">=</span> <span class=\"n\">GridGraph</span><span class=\"p\">(</span>\n    <span class=\"n\">x_size</span><span class=\"o\">=</span><span class=\"n\">x_size</span><span class=\"p\">,</span>\n    <span class=\"n\">y_size</span><span class=\"o\">=</span><span class=\"n\">y_size</span><span class=\"p\">,</span>\n    <span class=\"n\">blocks</span><span class=\"o\">=</span><span class=\"n\">blocks</span><span class=\"p\">,</span>\n    <span class=\"n\">add_exterior_walls</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Solve the shortest path between two points</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">gridGraph</span><span class=\"o\">.</span><span class=\"n\">get_shortest_path</span><span class=\"p\">(</span>\n    <span class=\"n\">origin_node</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;y&quot;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span>\n    <span class=\"n\">destination_node</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"s2\">&quot;y&quot;</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">},</span>\n    <span class=\"c1\"># Optional: Specify the output coodinate format (default is &#39;list_of_dicts)</span>\n    <span class=\"n\">output_coordinate_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;list_of_lists&quot;</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Optional: Cache the origin point spanning_tree for faster calculations on future calls</span>\n    <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"c1\"># Optional: Specify the node to cache the spanning tree for (default is the origin node)</span>\n    <span class=\"c1\"># Note: This first call will be slower, but future calls using this origin node will be substantially faster</span>\n    <span class=\"n\">cache_for</span><span class=\"o\">=</span><span class=\"s2\">&quot;origin&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; {&#39;length&#39;: 20.9704, &#39;coordinate_path&#39;: [[2, 10], [3, 9], [4, 8], [5, 8], [6, 7], [7, 6], [8, 5], [9, 4], [10, 4], [11, 4], [12, 5], [13, 6], [14, 7], [15, 7], [16, 8], [17, 9], [18, 10]]}</span>\n</code></pre>\n</div>\n\n<h2 id=\"advanced-usage\">Advanced Usage</h2>\n\n<p>Using <code>scgraph_data</code> geographs:</p>\n\n<ul>\n<li>Note: Make sure to install the <code>scgraph_data</code> package before using these geographs</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scgraph_data.world_railways</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">world_railways_geograph</span>\n\n<span class=\"c1\"># Get the shortest path between Kalamazoo Michigan and Detroit Michigan by Train</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">world_railways_geograph</span><span class=\"o\">.</span><span class=\"n\">get_shortest_path</span><span class=\"p\">(</span>\n    <span class=\"n\">origin_node</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;latitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">42.29</span><span class=\"p\">,</span><span class=\"s2\">&quot;longitude&quot;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">85.58</span><span class=\"p\">},</span>\n    <span class=\"n\">destination_node</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;latitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">42.33</span><span class=\"p\">,</span><span class=\"s2\">&quot;longitude&quot;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">83.05</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Get a geojson line path of an output for easy visualization:</p>\n\n<ul>\n<li>Note: <code>mapshaper.org</code> and <code>geojson.io</code> are good tools for visualizing geojson files</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scgraph.geographs.marnet</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">marnet_geograph</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scgraph.utils</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">get_line_path</span>\n\n <span class=\"c1\"># Get the shortest sea path between Sri Lanka and Somalia</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">marnet_geograph</span><span class=\"o\">.</span><span class=\"n\">get_shortest_path</span><span class=\"p\">(</span>\n    <span class=\"n\">origin_node</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;latitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">7.87</span><span class=\"p\">,</span><span class=\"s2\">&quot;longitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">80.77</span><span class=\"p\">},</span>\n    <span class=\"n\">destination_node</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;latitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">5.15</span><span class=\"p\">,</span><span class=\"s2\">&quot;longitude&quot;</span><span class=\"p\">:</span> <span class=\"mf\">46.20</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Write the output to a geojson file</span>\n<span class=\"n\">get_line_path</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">&#39;output.geojson&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Modify an existing geograph: See the notebook <a href=\"https://colab.research.google.com/github/connor-makowski/scgraph/blob/main/examples/geograph_modifications.ipynb\">here</a></p>\n\n<p>You can specify your own custom graphs for direct access to the solving algorithms. This requires the use of the low level <code>Graph</code> class</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scgraph</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n\n<span class=\"c1\"># Define an arbitrary graph</span>\n<span class=\"c1\"># See the graph definitions here:</span>\n<span class=\"c1\"># https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</span>\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Optional: Validate your graph</span>\n<span class=\"n\">Graph</span><span class=\"o\">.</span><span class=\"n\">validate_graph</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the shortest path between idx 0 and idx 5</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"o\">.</span><span class=\"n\">dijkstra_makowski</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">origin_id</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">destination_id</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; {&#39;path&#39;: [0, 2, 1, 3, 5], &#39;length&#39;: 10}</span>\n</code></pre>\n</div>\n\n<p>You can also use a slightly higher level <code>GeoGraph</code> class to work with latitude / longitude pairs</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">scgraph</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">GeoGraph</span>\n\n<span class=\"c1\"># Define nodes</span>\n<span class=\"c1\"># See the nodes definitions here:</span>\n<span class=\"c1\"># https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</span>\n<span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># London</span>\n    <span class=\"p\">[</span><span class=\"mf\">51.5074</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.1278</span><span class=\"p\">],</span>\n    <span class=\"c1\"># Paris</span>\n    <span class=\"p\">[</span><span class=\"mf\">48.8566</span><span class=\"p\">,</span> <span class=\"mf\">2.3522</span><span class=\"p\">],</span>\n    <span class=\"c1\"># Berlin</span>\n    <span class=\"p\">[</span><span class=\"mf\">52.5200</span><span class=\"p\">,</span> <span class=\"mf\">13.4050</span><span class=\"p\">],</span>\n    <span class=\"c1\"># Rome</span>\n    <span class=\"p\">[</span><span class=\"mf\">41.9028</span><span class=\"p\">,</span> <span class=\"mf\">12.4964</span><span class=\"p\">],</span>\n    <span class=\"c1\"># Madrid</span>\n    <span class=\"p\">[</span><span class=\"mf\">40.4168</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">3.7038</span><span class=\"p\">],</span>\n    <span class=\"c1\"># Lisbon</span>\n    <span class=\"p\">[</span><span class=\"mf\">38.7223</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">9.1393</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"c1\"># Define a graph</span>\n<span class=\"c1\"># See the graph definitions here:</span>\n<span class=\"c1\"># https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</span>\n<span class=\"n\">graph</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># From London</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># To Paris</span>\n        <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">311</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># From Paris</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># To London</span>\n        <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"mi\">311</span><span class=\"p\">,</span>\n        <span class=\"c1\"># To Berlin</span>\n        <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">878</span><span class=\"p\">,</span>\n        <span class=\"c1\"># To Rome</span>\n        <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">1439</span><span class=\"p\">,</span>\n        <span class=\"c1\"># To Madrid</span>\n        <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mi\">1053</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># From Berlin</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># To Paris</span>\n        <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">878</span><span class=\"p\">,</span>\n        <span class=\"c1\"># To Rome</span>\n        <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"mi\">1181</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># From Rome</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># To Paris</span>\n        <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1439</span><span class=\"p\">,</span>\n        <span class=\"c1\"># To Berlin</span>\n        <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"mi\">1181</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># From Madrid</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># To Paris</span>\n        <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"mi\">1053</span><span class=\"p\">,</span>\n        <span class=\"c1\"># To Lisbon</span>\n        <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"mi\">623</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># From Lisbon</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># To Madrid</span>\n        <span class=\"mi\">4</span><span class=\"p\">:</span> <span class=\"mi\">623</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Create a GeoGraph object</span>\n<span class=\"n\">my_geograph</span> <span class=\"o\">=</span> <span class=\"n\">GeoGraph</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"o\">=</span><span class=\"n\">nodes</span><span class=\"p\">,</span> <span class=\"n\">graph</span><span class=\"o\">=</span><span class=\"n\">graph</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Optional: Validate your graph</span>\n<span class=\"n\">my_geograph</span><span class=\"o\">.</span><span class=\"n\">validate_graph</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Optional: Validate your nodes</span>\n<span class=\"n\">my_geograph</span><span class=\"o\">.</span><span class=\"n\">validate_nodes</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the shortest path between two points</span>\n<span class=\"c1\"># In this case, Birmingham England and Zaragoza Spain</span>\n<span class=\"c1\"># Since Birmingham and Zaragoza are not in the graph,</span>\n<span class=\"c1\"># the algorithm will add them into the graph.</span>\n<span class=\"c1\"># See: https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph.get_shortest_path</span>\n<span class=\"c1\"># Expected output would be to go from</span>\n<span class=\"c1\"># Birmingham -&gt; London -&gt; Paris -&gt; Madrid -&gt; Zaragoza</span>\n\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">my_geograph</span><span class=\"o\">.</span><span class=\"n\">get_shortest_path</span><span class=\"p\">(</span>\n    <span class=\"c1\"># Birmingham England</span>\n    <span class=\"n\">origin_node</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;latitude&#39;</span><span class=\"p\">:</span> <span class=\"mf\">52.4862</span><span class=\"p\">,</span> <span class=\"s1\">&#39;longitude&#39;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">1.8904</span><span class=\"p\">},</span>\n    <span class=\"c1\"># Zaragoza Spain</span>\n    <span class=\"n\">destination_node</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;latitude&#39;</span><span class=\"p\">:</span> <span class=\"mf\">41.6488</span><span class=\"p\">,</span> <span class=\"s1\">&#39;longitude&#39;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mf\">0.8891</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n<span class=\"c1\"># {</span>\n<span class=\"c1\">#     &#39;length&#39;: 1799.4323,</span>\n<span class=\"c1\">#     &#39;coordinate_path&#39;: [</span>\n<span class=\"c1\">#         [52.4862, -1.8904],</span>\n<span class=\"c1\">#         [51.5074, -0.1278],</span>\n<span class=\"c1\">#         [48.8566, 2.3522],</span>\n<span class=\"c1\">#         [40.4168, -3.7038],</span>\n<span class=\"c1\">#         [41.6488, -0.8891]</span>\n<span class=\"c1\">#     ]</span>\n<span class=\"c1\"># }</span>\n</code></pre>\n</div>\n\n<h1 id=\"development\">Development</h1>\n\n<h2 id=\"running-tests-prettifying-code-and-updating-docs\">Running Tests, Prettifying Code, and Updating Docs</h2>\n\n<p>Make sure Docker is installed and running on a Unix system (Linux, MacOS, WSL2).</p>\n\n<ul>\n<li>Create a docker container and drop into a shell\n<ul>\n<li><code>./run.sh</code></li>\n</ul></li>\n<li>Run all tests (see ./utils/test.sh)\n<ul>\n<li><code>./run.sh test</code></li>\n</ul></li>\n<li>Prettify the code (see ./utils/prettify.sh)\n<ul>\n<li><code>./run.sh prettify</code></li>\n</ul></li>\n<li><p>Update the docs (see ./utils/docs.sh)</p>\n\n<ul>\n<li><code>./run.sh docs</code></li>\n</ul></li>\n<li><p>Note: You can and should modify the <code>Dockerfile</code> to test different python versions.</p></li>\n</ul>\n\n<h2 id=\"attributions-and-thanks\">Attributions and Thanks</h2>\n\n<p>Originally inspired by <a href=\"https://github.com/genthalili/searoute-py\">searoute</a> including the use of one of their <a href=\"https://github.com/genthalili/searoute-py/blob/main/searoute/data/marnet_densified_v2_old.geojson\">datasets</a> that has been modified to work properly with this package.</p>\n"}, {"fullname": "scgraph.cache", "modulename": "scgraph.cache", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.cache.CacheGraph", "modulename": "scgraph.cache", "qualname": "CacheGraph", "kind": "class", "doc": "<p>A class allowing a graph to cache spanning trees to quickly compute shortest paths between nodes.\nThis is useful for speeding up the computation of shortest when origins or destinations are often the same.</p>\n"}, {"fullname": "scgraph.cache.CacheGraph.__init__", "modulename": "scgraph.cache", "qualname": "CacheGraph.__init__", "kind": "function", "doc": "<p>Initialize the CacheGraph with a graph.</p>\n\n<p>Requires:</p>\n\n<ul>\n<li><p>graph:</p>\n\n<ul>\n<li>Type: list of dictionaries</li>\n<li>See: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\">https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</a></li>\n<li>Note: The graph must be symmetric for the CacheGraph to work based on how it takes advantage of spanning trees.</li>\n</ul></li>\n<li><p>Note: Take care when caching spanning trees to avoid memory issues. It is recommend to only cache for nodes that will be used often.</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "scgraph.cache.CacheGraph.graph", "modulename": "scgraph.cache", "qualname": "CacheGraph.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.cache.CacheGraph.cache", "modulename": "scgraph.cache", "qualname": "CacheGraph.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.cache.CacheGraph.get_shortest_path", "modulename": "scgraph.cache", "qualname": "CacheGraph.get_shortest_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Get the shortest path between two nodes in the graph attempting to use a cached spanning tree if available</li>\n<li>If a cached spanning tree is not available, it will compute the spanning tree and cache it for future use if specified by <code>cache</code></li>\n</ul>\n\n<p>Requires:</p>\n\n<ul>\n<li>origin_id: The id of the origin node</li>\n<li>destination_id: The id of the destination node</li>\n</ul>\n\n<p>Optional:</p>\n\n<ul>\n<li>cache: Whether to cache the spanning tree for future use\n<ul>\n<li>Default: True</li>\n</ul></li>\n<li>cache_for: Whether to cache the spanning tree for the origin or destination node\n<ul>\n<li>Default: 'origin'</li>\n<li>Options: 'origin', 'destination'</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">origin_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">destination_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cache_for</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;origin&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core", "modulename": "scgraph.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.Graph", "modulename": "scgraph.core", "qualname": "Graph", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.Graph.validate_graph", "modulename": "scgraph.core", "qualname": "Graph.validate_graph", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Validate that a graph is properly formatted</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>:\n<ul>\n<li>Type: list of dictionaries</li>\n<li>See: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\">https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</a></a></li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>check_symmetry</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to check that the graph is symmetric</li>\n<li>Default: True</li>\n<li>Note: This is forced to True if <code>check_connected</code> is True</li>\n</ul></li>\n<li><code>check_connected</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to check that the graph is fully connected</li>\n<li>Default: True</li>\n<li>Note: For computational efficiency, only symmetric graphs are checked for connectivity</li>\n<li>Note: If this is True, <code>check_symmetry</code> is forced to True and the graph will be checked for symmetry prior to checking for connectivity</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">check_symmetry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">check_connected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.Graph.validate_connected", "modulename": "scgraph.core", "qualname": "Graph.validate_connected", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Validate that a graph is fully connected\n<ul>\n<li>This means that every node in the graph has a path to every other node in the graph</li>\n<li>Note: This assumes that the graph is symmetric</li>\n</ul></li>\n<li>Return True if the graph is fully connected and False if it is not</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>:\n<ul>\n<li>Type: list of dictionaries</li>\n<li>See: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\">https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</a></a></li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.Graph.input_check", "modulename": "scgraph.core", "qualname": "Graph.input_check", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Check that the inputs passed to the shortest path algorithm are valid</li>\n<li>Raises an exception if the inputs passed are not valid</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>:\n<ul>\n<li>Type: list of dictionaries</li>\n<li>See: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\">https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</a></a></li>\n</ul></li>\n<li><code>origin_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the origin node from the graph dictionary to start the shortest path from</li>\n</ul></li>\n<li><code>destination_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">origin_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">destination_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.Graph.dijkstra", "modulename": "scgraph.core", "qualname": "Graph.dijkstra", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Identify the shortest path between two nodes in a sparse network graph using a modified dijkstra algorithm\n<ul>\n<li>Modifications allow for a sparse distance matrix to be used instead of a dense distance matrix</li>\n<li>This can dramatically reduce the memory and compute requirements of the algorithm</li>\n<li>This algorithm runs in O(n^2) time where n is the number of nodes in the graph</li>\n</ul></li>\n<li>Return a dictionary of various path information including:\n<ul>\n<li><code>id_path</code>: A list of node ids in the order they are visited</li>\n<li><code>path</code>: A list of node dictionaries (lat + long) in the order they are visited</li>\n</ul></li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>:\n<ul>\n<li>Type: list of dictionaries</li>\n<li>See: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\">https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</a></a></li>\n</ul></li>\n<li><code>origin_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the origin node from the graph dictionary to start the shortest path from</li>\n</ul></li>\n<li><code>destination_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">origin_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">destination_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.Graph.dijkstra_makowski", "modulename": "scgraph.core", "qualname": "Graph.dijkstra_makowski", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Identify the shortest path between two nodes in a sparse network graph using Makowski's modified Dijkstra algorithm\n<ul>\n<li>Modifications allow for a sparse distance matrix to be used instead of a dense distance matrix</li>\n<li>Improvements include only computing future potential nodes based on the open leaves for each branch\n<ul>\n<li>Open leaves are nodes that have not been visited yet but are adjacent to other visited nodes</li>\n</ul></li>\n<li>This can dramatically reduce the memory and compute requirements of the algorithm</li>\n<li>For particularly sparse graphs, this algorithm runs close to O(n log n) time\n<ul>\n<li>Where n is the number of nodes in the graph</li>\n</ul></li>\n<li>For dense graphs, this algorithm runs closer to O(n^2) time (similar to the standard Dijkstra algorithm)\n<ul>\n<li>Where n is the number of nodes in the graph</li>\n</ul></li>\n</ul></li>\n<li>Return a dictionary of various path information including:\n<ul>\n<li><code>id_path</code>: A list of node ids in the order they are visited</li>\n<li><code>path</code>: A list of node dictionaries (lat + long) in the order they are visited</li>\n</ul></li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>:\n<ul>\n<li>Type: list of dictionaries</li>\n<li>See: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\">https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</a></a></li>\n</ul></li>\n<li><code>origin_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the origin node from the graph dictionary to start the shortest path from</li>\n</ul></li>\n<li><code>destination_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">origin_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">destination_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph", "modulename": "scgraph.core", "qualname": "GeoGraph", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.GeoGraph.__init__", "modulename": "scgraph.core", "qualname": "GeoGraph.__init__", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Create a GeoGraph object</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><p><code>graph</code></p>\n\n<ul>\n<li>Type: list of dictionaries</li>\n<li>What: A list of dictionaries where the indicies are origin node ids and the values are dictionaries of destination node indices and distances</li>\n<li>Note: All nodes must be included as origins in the graph regardless of if they have any connected destinations</li>\n<li>EG:</li>\n</ul>\n\n<pre><code>    [\n        # From London\n        {\n            # To Paris\n            1: 311,\n        },\n        # From Paris\n        {\n            # To London\n            0: 311,\n            # To Berlin\n            2: 878,\n            # To Rome\n            3: 1439,\n            # To Madrid\n            4: 1053\n        },\n        # From Berlin\n        {\n            # To Paris\n            1: 878,\n            # To Rome\n            3: 1181,\n        },\n        # From Rome\n        {\n            # To Paris\n            1: 1439,\n            # To Berlin\n            2: 1181,\n        },\n        # From Madrid\n        {\n            # To Paris\n            1: 1053,\n            # To Lisbon\n            5: 623\n        },\n        # From Lisbon\n        {\n            # To Madrid\n            4: 623\n        }\n    ]\n</code></pre></li>\n<li><p><code>nodes</code></p>\n\n<ul>\n<li>Type: list of lists of ints or floats</li>\n<li>What: A list of lists where the values are coordinates (latitude then longitude)</li>\n<li>Note: The length of the nodes list must be the same as that of the graph list</li>\n<li>EG:</li>\n</ul>\n\n<pre><code>    [\n        # London\n        [51.5074, 0.1278],\n        # Paris\n        [48.8566, 2.3522],\n        # Berlin\n        [52.5200, 13.4050],\n        # Rome\n        [41.9028, 12.4964],\n        # Madrid\n        [40.4168, 3.7038],\n        # Lisbon\n        [38.7223, 9.1393]\n    ]\n</code></pre></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">nodes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "scgraph.core.GeoGraph.graph", "modulename": "scgraph.core", "qualname": "GeoGraph.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.GeoGraph.nodes", "modulename": "scgraph.core", "qualname": "GeoGraph.nodes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.GeoGraph.validate_graph", "modulename": "scgraph.core", "qualname": "GeoGraph.validate_graph", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Validate that self.graph is properly formatted (see Graph.validate_graph)</li>\n<li>Raises an exception if the graph is invalid</li>\n<li>Returns None if the graph is valid</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>check_symmetry</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to check that the graph is symmetric</li>\n<li>Default: True</li>\n<li>Note: This is forced to True if <code>check_connected</code> is True</li>\n</ul></li>\n<li><code>check_connected</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to check that the graph is fully connected</li>\n<li>Default: True</li>\n<li>Note: For computational efficiency, graphs are validated for symmetry prior to checking for connectivity</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check_symmetry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">check_connected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.validate_nodes", "modulename": "scgraph.core", "qualname": "GeoGraph.validate_nodes", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Validate that self.nodes is properly formatted (see GeoGraph.__init__ docs for more details)</li>\n<li>Raises an exception if the nodes are invalid</li>\n<li>Returns None if the nodes are valid</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.get_shortest_path", "modulename": "scgraph.core", "qualname": "GeoGraph.get_shortest_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li><p>Identify the shortest path between two nodes in a sparse network graph</p></li>\n<li><p>Return a dictionary of various path information including:</p>\n\n<ul>\n<li><code>id_path</code>: A list of node ids in the order they are visited</li>\n<li><code>path</code>: A list of nodes  (list of lat then long) in the order they are visited</li>\n<li><code>length</code>: The length of the path</li>\n</ul>\n\n<p>Required Arguments:</p></li>\n<li><p><code>origin_node</code></p>\n\n<ul>\n<li>Type: dict of int | float</li>\n<li>What: A dictionary with the keys 'latitude' and 'longitude'</li>\n</ul></li>\n<li><code>destination_node</code>\n<ul>\n<li>Type: dict of int | float</li>\n<li>What: A dictionary with the keys 'latitude' and 'longitude'</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>output_units</code>\n<ul>\n<li>Type: str</li>\n<li>What: The units in which to return the length of the path</li>\n<li>Default: 'km'</li>\n<li>Options:\n<ul>\n<li>'km': Kilometers</li>\n<li>'m': Meters</li>\n<li>'mi': Miles</li>\n<li>'ft': Feet</li>\n</ul></li>\n</ul></li>\n<li><code>algorithm_fn</code>\n<ul>\n<li>Type: function | method</li>\n<li>What: The algorithm function to identify the shortest path</li>\n<li>Default: 'Graph.dijkstra_makowski'</li>\n<li>Options:\n<ul>\n<li>'Graph.dijkstra': A modified dijkstra algorithm that uses a sparse distance matrix to identify the shortest path</li>\n<li>'Graph.dijkstra_makowski': A modified dijkstra algorithm that uses a sparse distance matrix to identify the shortest path</li>\n<li>Any user defined algorithm that takes the arguments:\n<ul>\n<li><code>graph</code>: A dictionary of dictionaries where the keys are origin node ids and the values are dictionaries of destination node ids and distances\n<ul>\n<li>See: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\">https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</a></a></a></a></a></li>\n</ul></li>\n<li><code>origin</code>: The id of the origin node from the graph dictionary to start the shortest path from</li>\n<li><code>destination</code>: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><code>off_graph_circuity</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The circuity factor to apply to any distance calculations between your origin and destination nodes and their connecting nodes in the graph</li>\n<li>Default: 1</li>\n<li>Notes:\n<ul>\n<li>For alogrithmic solving purposes, the node_addition_circuity is applied to the origin and destination nodes when they are added to the graph</li>\n<li>This is only applied after an <code>optimal solution</code> using the <code>node_addition_circuity</code> has been found when it is then adjusted to equal the <code>off_graph_circuity</code></li>\n</ul></li>\n</ul></li>\n<li><code>node_addition_type</code>\n<ul>\n<li>Type: str</li>\n<li>What: The type of node addition to use when adding your origin node to the distance matrix</li>\n<li>Default: 'quadrant'</li>\n<li>Options:\n<ul>\n<li>'quadrant': Add the closest node in each quadrant (ne, nw, se, sw) to the distance matrix for this node</li>\n<li>'closest': Add only the closest node to the distance matrix for this node</li>\n<li>'all': Add all nodes to the distance matrix for this node</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li><code>dijkstra_makowski</code> will operate substantially faster if the <code>node_addition_type</code> is set to 'quadrant' or 'closest'</li>\n<li><code>dijkstra</code> will operate at the similar speeds regardless of the <code>node_addition_type</code></li>\n<li>When using <code>all</code>, you should consider using <code>dijkstra</code> instead of <code>dijkstra_makowski</code> as it will be faster</li>\n<li>The destination node is always added as 'all' regardless of the <code>node_addition_type</code> setting\n<ul>\n<li>This guarantees that any destination node will be connected to any origin node regardless of how or where the origin node is added to the graph</li>\n</ul></li>\n<li>If the passed graph is not a connected graph (meaning it is comprised of multiple disconnected networks)\n<ul>\n<li>The entrypoints generated using the <code>node_addition_type</code> will determine which disconnected networks will be used to calculate the <code>optimal route</code></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><code>node_addition_circuity</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The circuity factor to apply when adding your origin and destination nodes to the distance matrix</li>\n<li>Default: 4</li>\n<li>Note:\n<ul>\n<li>This defaults to 4 to prevent the algorithm from taking a direct route in direction of the destination over some impassible terrain (EG: a maritime network that goes through land)</li>\n<li>A higher value will push the algorithm to join the network at a closer node to avoid the extra distance from the circuity factor</li>\n<li>This is only relevant if <code>node_addition_type</code> is set to 'quadrant' or 'all' as it affects the choice on where to enter the graph network</li>\n<li>This factor is used to calculate the node sequence for the <code>optimal route</code>, however the reported <code>length</code> of the path will be calculated using the <code>off_graph_circuity</code> factor</li>\n</ul></li>\n</ul></li>\n<li><code>geograph_units</code>\n<ul>\n<li>Type: str</li>\n<li>What: The units of measurement in the geograph data</li>\n<li>Default: 'km'</li>\n<li>Options:\n<ul>\n<li>'km': Kilometers</li>\n<li>'m': Meters</li>\n<li>'mi': Miles</li>\n<li>'ft': Feet</li>\n</ul></li>\n<li>Note: In general, all scgraph provided geographs be in kilometers</li>\n</ul></li>\n<li><code>output_coordinate_path</code>\n<ul>\n<li>Type: str</li>\n<li>What: The format of the output coordinate path</li>\n<li>Default: 'list_of_lists'</li>\n<li>Options:\n<ul>\n<li>'list_of_dicts': A list of dictionaries with keys 'latitude' and 'longitude'</li>\n<li>'list_of_lists': A list of lists with the first value being latitude and the second being longitude</li>\n<li>'list_of_lists_long_first': A list of lists with the first value being longitude and the second being latitude</li>\n</ul></li>\n</ul></li>\n<li><code>output_path</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to output the path as a list of geograph node ids (for debugging and other advanced uses)</li>\n<li>Default: False</li>\n</ul></li>\n<li><code>node_addition_lat_lon_bound</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: Forms a bounding box around the origin and destination nodes as they are added to graph\n<ul>\n<li>Only points on the current graph inside of this bounding box are considered when updating the distance matrix for the origin or destination nodes</li>\n</ul></li>\n<li>Default: 5</li>\n<li>Note: If no nodes are found within the bounding box, the bounding box is expanded to 180 degrees in all directions (all nodes are considered)</li>\n<li>Note: This is only used when adding a new node (the specified origin and destination) to the graph</li>\n</ul></li>\n<li><code>node_addition_math</code>\n<ul>\n<li>Type: str</li>\n<li>What: The math to use when calculating the distance between nodes when determining the closest node (or closest quadrant node) to add to the graph</li>\n<li>Default: 'euclidean'</li>\n<li>Options:\n<ul>\n<li>'euclidean': Use the euclidean distance between nodes. This is much faster but is not as accurate (especially near the poles)</li>\n<li>'haversine': Use the haversine distance between nodes. This is slower but is an accurate representation of the surface distance between two points on the earth</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li>Only used if <code>node_addition_type</code> is set to 'quadrant' or 'closest'</li>\n</ul></li>\n</ul></li>\n<li><code>**kwargs</code>\n<ul>\n<li>Additional keyword arguments. These are included for forwards and backwards compatibility reasons, but are not currently used.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">origin_node</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">destination_node</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">output_units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;km&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">algorithm_fn</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">Graph</span><span class=\"o\">.</span><span class=\"n\">dijkstra_makowski</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">off_graph_circuity</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;quadrant&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_circuity</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">geograph_units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;km&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_coordinate_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list_of_lists&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_lat_lon_bound</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_math</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;euclidean&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.adujust_circuity_length", "modulename": "scgraph.core", "qualname": "GeoGraph.adujust_circuity_length", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Adjust the length of the path to account for the circuity factors applied to the origin and destination nodes</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>output</code>\n<ul>\n<li>Type: dict</li>\n<li>What: The output from the algorithm function</li>\n</ul></li>\n<li><code>node_addition_circuity</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The circuity factor that was applied when adding your origin and destination nodes to the distance matrix</li>\n</ul></li>\n<li><code>off_graph_circuity</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The circuity factor to apply to any distance calculations between your origin and destination nodes and their connecting nodes in the graph</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_circuity</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">off_graph_circuity</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.get_coordinate_path", "modulename": "scgraph.core", "qualname": "GeoGraph.get_coordinate_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Return a list of node dictionaries (lat + long) in the order they are visited</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>path</code>\n<ul>\n<li>Type: list</li>\n<li>What: A list of node ids in the order they are visited</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.remove_appended_node", "modulename": "scgraph.core", "qualname": "GeoGraph.remove_appended_node", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Remove the last node that was appended to the graph</li>\n<li>Assumes that this node has symmetric flows\n<ul>\n<li>EG: If node A has a distance of 10 to node B, then node B has a distance of 10 to node A</li>\n</ul></li>\n<li>Return None</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.get_node_distances", "modulename": "scgraph.core", "qualname": "GeoGraph.get_node_distances", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Get the distances between a node and all other nodes in the graph</li>\n<li>This is used to determine the closest node to add to the graph when adding a new node</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>node</code>\n<ul>\n<li>Type: list</li>\n<li>What: A list of the latitude and longitude of the node</li>\n<li>EG: [latitude, longitude] -> [31.23, 121.47]</li>\n</ul></li>\n<li><code>circuity</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The circuity to apply to any distance calculations</li>\n<li>Note: This defaults to 4 to prevent the algorithm from taking a direct route in direction of the destination over some impassible terrain (EG: a maritime network that goes through land)</li>\n</ul></li>\n<li><code>node_addition_type</code>\n<ul>\n<li>Type: str</li>\n<li>What: The type of node addition to use</li>\n<li>Options:\n<ul>\n<li>'quadrant': Add the closest node in each quadrant (ne, nw, se, sw) to the distance matrix for this node</li>\n<li>'closest': Add only the closest node to the distance matrix for this node</li>\n<li>'all': Add all nodes to the distance matrix for this node</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li><code>dijkstra_makowski</code> will operate substantially faster if the <code>node_addition_type</code> is set to 'quadrant' or 'closest'</li>\n<li><code>dijkstra</code> will operate at the similar speeds regardless of the <code>node_addition_type</code></li>\n<li>When using <code>all</code>, you should consider using <code>dijkstra</code> instead of <code>dijkstra_makowski</code> as it will be faster</li>\n</ul></li>\n</ul></li>\n<li><code>node_addition_math</code>\n<ul>\n<li>Type: str</li>\n<li>What: The math to use when calculating the distance between nodes when determining the closest node (or closest quadrant node) to add to the graph</li>\n<li>Default: 'euclidean'</li>\n<li>Options:\n<ul>\n<li>'euclidean': Use the euclidean distance between nodes. This is much faster but is not accurate (especially near the poles)</li>\n<li>'haversine': Use the haversine distance between nodes. This is slower but is an accurate representation of the surface distance between two points on the earth</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li>Once the closest node (or closest quadrant node) is determined, the haversine distance (with circuity) is used to calculate the distance between the nodes when adding it to the graph.</li>\n</ul></li>\n</ul></li>\n<li><code>lat_lon_bound</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: Forms a bounding box around the node that is to be added to graph. Only selects graph nodes to consider joining that are within this bounding box.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">circuity</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_math</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lat_lon_bound</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.add_node", "modulename": "scgraph.core", "qualname": "GeoGraph.add_node", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Add a node to the network</li>\n<li>Returns the id of the new node</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>node</code>\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary with the keys 'latitude' and 'longitude'</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>circuity</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The circuity to apply to any distance calculations</li>\n<li>Default: 4</li>\n<li>Note: This defaults to 4 to prevent the algorithm from taking a direct route in direction of the destination over some impassible terrain (EG: a maritime network that goes through land)</li>\n</ul></li>\n<li><code>node_addition_type</code>\n<ul>\n<li>Type: str</li>\n<li>What: The type of node addition to use</li>\n<li>Default: 'quadrant'</li>\n<li>Options:\n<ul>\n<li>'quadrant': Add the closest node in each quadrant (ne, nw, se, sw) to the distance matrix for this node</li>\n<li>'closest': Add only the closest node to the distance matrix for this node</li>\n<li>'all': Add all nodes to the distance matrix for this node</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li><code>dijkstra_makowski</code> will operate substantially faster if the <code>node_addition_type</code> is set to 'quadrant' or 'closest'</li>\n<li><code>dijkstra</code> will operate at the similar speeds regardless of the <code>node_addition_type</code></li>\n<li>When using <code>all</code>, you should consider using <code>dijkstra</code> instead of <code>dijkstra_makowski</code> as it will be faster</li>\n</ul></li>\n</ul></li>\n<li><code>node_addition_math</code>\n<ul>\n<li>Type: str</li>\n<li>What: The math to use when calculating the distance between nodes when determining the closest node (or closest quadrant node) to add to the graph</li>\n<li>Default: 'euclidean'</li>\n<li>Options:\n<ul>\n<li>'euclidean': Use the euclidean distance between nodes. This is much faster but is not accurate (especially near the poles)</li>\n<li>'haversine': Use the haversine distance between nodes. This is slower but is an accurate representation of the surface distance between two points on the earth</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li>Once the closest node (or closest quadrant node) is determined, the haversine distance (with circuity) is used to calculate the distance between the nodes when adding it to the graph.</li>\n</ul></li>\n</ul></li>\n<li><code>lat_lon_bound</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: Forms a bounding box around the node that is to be added to graph. Only selects graph nodes to consider joining that are within this bounding box.</li>\n<li>Default: 5</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">circuity</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;quadrant&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_math</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;euclidean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">lat_lon_bound</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.save_as_geojson", "modulename": "scgraph.core", "qualname": "GeoGraph.save_as_geojson", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Save the current geograph object as a geojson file specifed by <code>filename</code></li>\n<li>This is useful for understanding the underlying geograph and for debugging purposes</li>\n<li>Returns None</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>filename</code>\n<ul>\n<li>Type: str</li>\n<li>What: The filename to save the geojson file as</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.save_as_geograph", "modulename": "scgraph.core", "qualname": "GeoGraph.save_as_geograph", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Save the current geograph as an importable python file</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>name</code>\n<ul>\n<li>Type: str</li>\n<li>What: The name of the geograph and file</li>\n<li>EG: 'custom'\n<ul>\n<li>Stored as: 'custom.py'\n<ul>\n<li>In your current directory</li>\n</ul></li>\n<li>Import as: 'from .custom import custom_geograph'</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.mod_remove_arc", "modulename": "scgraph.core", "qualname": "GeoGraph.mod_remove_arc", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Remove an arc from the graph</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>origin_idx</code>\n<ul>\n<li>Type: int</li>\n<li>What: The index of the origin node</li>\n</ul></li>\n<li><code>destination_idx</code>\n<ul>\n<li>Type: int</li>\n<li>What: The index of the destination node</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>undirected</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to remove the arc in both directions</li>\n<li>Default: True</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">origin_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">destination_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">undirected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.mod_add_node", "modulename": "scgraph.core", "qualname": "GeoGraph.mod_add_node", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Add a node to the graph</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>latitude</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The latitude of the node</li>\n</ul></li>\n<li><code>longitude</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The longitude of the node</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>The index of the new node</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">latitude</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">longitude</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.mod_add_arc", "modulename": "scgraph.core", "qualname": "GeoGraph.mod_add_arc", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Add an arc to the graph</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>origin_idx</code>\n<ul>\n<li>Type: int</li>\n<li>What: The index of the origin node</li>\n</ul></li>\n<li><code>destination_idx</code>\n<ul>\n<li>Type: int</li>\n<li>What: The index of the destination node</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>distance</code>\n<ul>\n<li>Type: int | float</li>\n<li>What: The distance between the origin and destination nodes in terms of the graph distance (normally km)</li>\n<li>Default: 0</li>\n</ul></li>\n<li><code>use_haversine_distance</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to calculate the haversine distance (km) between the nodes when calculating the distance</li>\n<li>Default: True</li>\n<li>Note: If true, overrides the <code>distance</code> argument</li>\n</ul></li>\n<li><code>undirected</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to add the arc in both directions</li>\n<li>Default: True</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">origin_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">destination_idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">use_haversine_distance</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">undirected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.load_geojson_as_geograph", "modulename": "scgraph.core", "qualname": "load_geojson_as_geograph", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Create a CustomGeoGraph object loaded from a geojson file</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><p><code>geojson_filename</code></p>\n\n<ul>\n<li>Type: str</li>\n<li>What: The filename of the geojson file to load</li>\n<li>Note: All arcs read in will be undirected</li>\n<li><p>Note: This geojson file must be formatted in a specific way</p>\n\n<ul>\n<li>The geojson file must be a FeatureCollection</li>\n<li>Each feature must be a LineString with two coordinate pairs\n<ul>\n<li>The first coordinate pair must be the origin node</li>\n<li>The second coordinate pair must be the destination node</li>\n<li>The properties of the feature must include the distance between the origin and destination nodes</li>\n<li>The properties of the feature must include the origin and destination node idxs</li>\n<li>Origin and destination node idxs must be integers between 0 and n-1 where n is the number of nodes in the graph</li>\n</ul></li>\n<li>EG:</li>\n</ul>\n\n<pre><code>{\n    \"type\": \"FeatureCollection\",\n    \"features\": [\n        {\n            \"type\": \"Feature\",\n            \"properties\": {\n                \"origin_idx\": 0,\n                \"destination_idx\": 1,\n                \"distance\": 10\n            },\n            \"geometry\": {\n                \"type\": \"LineString\",\n                \"coordinates\": [\n                    [121.47, 31.23],\n                    [121.48, 31.24]\n                ]\n            }\n        }\n    ]\n}\n</code></pre></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">geojson_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">scgraph</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">GeoGraph</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.get_multi_path_geojson", "modulename": "scgraph.core", "qualname": "get_multi_path_geojson", "kind": "function", "doc": "<p>Creates a GeoJSON file with the shortest path between the origin and destination of each route.</p>\n\n<p>Required Parameters:</p>\n\n<ul>\n<li><code>routes</code>: list[dict]\n<ul>\n<li>List of dictionaries with the following keys:\n<ul>\n<li>geograph: GeoGraph\n<ul>\n<li>Geograph object to use for the shortest path calculation.</li>\n</ul></li>\n<li>origin: dict[float|float]\n<ul>\n<li>Origin coordinates</li>\n<li>EG: {\"latitude\":39.2904, \"longitude\":-76.6122}</li>\n</ul></li>\n<li>destination: dict[float|int]\n<ul>\n<li>Destination coordinates</li>\n<li>EG: {\"latitude\":39.2904, \"longitude\":-76.6122}</li>\n</ul></li>\n<li>properties: dict\n<ul>\n<li>Dictionary with the properties of the route</li>\n<li>Everything in this dictionary will be included in the output GeoJSON file as properties of the route.</li>\n<li>EG: {\"id\":\"route_1\", \"name\":\"Route 1\", \"color\":\"#ff0000\"}</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Optional Parameters:</p>\n\n<ul>\n<li><code>filename</code>: str | None\n<ul>\n<li>Name of the output GeoJSON file.</li>\n<li>If None, the function will not save the file</li>\n<li>Default: None</li>\n</ul></li>\n<li><code>show_progress</code>: bool\n<ul>\n<li>Whether to show basic progress information</li>\n<li>Default: False</li>\n</ul></li>\n</ul>\n\n<p>Returns</p>\n\n<ul>\n<li><code>output</code>: dict\n<ul>\n<li>Dictionary with the GeoJSON file content.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">routes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\tfilename: [&lt;class &#x27;str&#x27;&gt;, None] = None,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.grid", "modulename": "scgraph.grid", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.grid.GridGraph", "modulename": "scgraph.grid", "qualname": "GridGraph", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "scgraph.grid.GridGraph.__init__", "modulename": "scgraph.grid", "qualname": "GridGraph.__init__", "kind": "function", "doc": "<p>Initializes a GridGraph object.</p>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>x_size</code>\n<ul>\n<li>Type: int</li>\n<li>What: The size of the grid in the x direction</li>\n</ul></li>\n<li><code>y_size</code>\n<ul>\n<li>Type: int</li>\n<li>What: The size of the grid in the y direction</li>\n</ul></li>\n<li><code>blocks</code>\n<ul>\n<li>Type: list of tuples</li>\n<li>What: A list of tuples representing the coordinates of the blocked cells</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>shape</code>\n<ul>\n<li>Type: list of tuples</li>\n<li>What: A list of tuples representing the shape of the moving object relative to the object location in the grid</li>\n<li>Default: [(0, 0), (0, 1), (1, 0), (1, 1)]</li>\n<li>Example: [(0, 0), (0, 1), (1, 0), (1, 1)]\n<ul>\n<li>Note: This would form a square of size 1x1</li>\n<li>Assuming the grid location is at (0,0) the square takes up the grid space between (0, 0) and (1, 1)</li>\n<li>Assumint the grid location is at (1,1) the square takes up the grid space between (1, 1) and (2, 2) with the same shape</li>\n</ul></li>\n<li>Note: This shape is used to determine which connections are allowed when passing through the grid.\n<ul>\n<li>For example\n<ul>\n<li>The shape is a square of size 1x1</li>\n<li>The location of the square is (0, 0)</li>\n<li>There is a blocked cell at (0, 1)</li>\n<li>There is a potential connection to (1, 1), (0, 1), and (1, 0)</li>\n<li>The square can not move to (1, 1) as it would collide with the blocked cell at (0, 1)\n<ul>\n<li>This is because the square would pass partly through the blocked cell on its way to (1, 1)</li>\n<li>To achieve the same result, it can move to (1, 0) and then up to (1, 1) taking extra time / distance</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><code>add_exterior_walls</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to add exterior walls to the grid</li>\n<li>Default: True</li>\n</ul></li>\n<li><code>conn_data</code>\n<ul>\n<li>Type: list of tuples</li>\n<li>What: A list of tuples representing movements allowed in the grid\n<ul>\n<li>Each tuple should contain three values: (x_offset, y_offset, distance)</li>\n<li>x_offset: The x offset from the current cell</li>\n<li>y_offset: The y offset from the current cell</li>\n<li>distance: The distance to the connected cell</li>\n</ul></li>\n<li>Default: [(0, 1, 1), (1, 0, 1), (0, -1, 1), (-1, 0, 1), (1, 1, sqrt(2)), (-1, -1, sqrt(2)), (1, -1, sqrt(2)), (-1, 1, sqrt(2))]\n<ul>\n<li>Note: If None, the default connection data will be used</li>\n<li>Note: This includes 8 directions, 4 cardinal and 4 diagonal</li>\n<li>Cardinal directions are 1 unit away, diagonal directions are sqrt(2) units away</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">blocks</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">shape</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">add_exterior_walls</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">conn_data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "scgraph.grid.GridGraph.x_size", "modulename": "scgraph.grid", "qualname": "GridGraph.x_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.grid.GridGraph.y_size", "modulename": "scgraph.grid", "qualname": "GridGraph.y_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.grid.GridGraph.blocks", "modulename": "scgraph.grid", "qualname": "GridGraph.blocks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.grid.GridGraph.add_exterior_walls", "modulename": "scgraph.grid", "qualname": "GridGraph.add_exterior_walls", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.grid.GridGraph.graph", "modulename": "scgraph.grid", "qualname": "GridGraph.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.grid.GridGraph.cacheGraph", "modulename": "scgraph.grid", "qualname": "GridGraph.cacheGraph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.grid.GridGraph.get_idx", "modulename": "scgraph.grid", "qualname": "GridGraph.get_idx", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Get the index of a cell in a 2D grid given its x and y coordinates</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>x</code>\n<ul>\n<li>Type: int</li>\n<li>What: The x coordinate of the cell</li>\n</ul></li>\n<li><code>y</code>\n<ul>\n<li>Type: int</li>\n<li>What: The y coordinate of the cell</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>idx</code>\n<ul>\n<li>Type: int</li>\n<li>What: The index of the cell in the grid</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.grid.GridGraph.get_x_y", "modulename": "scgraph.grid", "qualname": "GridGraph.get_x_y", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Get the x and y coordinates of a cell in a 2D grid given its index</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>idx</code>\n<ul>\n<li>Type: int</li>\n<li>What: The index of the cell</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>x</code>\n<ul>\n<li>Type: int</li>\n<li>What: The x coordinate of the cell</li>\n</ul></li>\n<li><code>y</code>\n<ul>\n<li>Type: int</li>\n<li>What: The y coordinate of the cell</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.grid.GridGraph.get_shortest_path", "modulename": "scgraph.grid", "qualname": "GridGraph.get_shortest_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li><p>Identify the shortest path between two nodes in a sparse network graph</p></li>\n<li><p>Return a dictionary of various path information including:</p>\n\n<ul>\n<li><code>id_path</code>: A list of graph ids in the order they are visited</li>\n<li><code>path</code>: A list of dicts (x, y) in the order they are visited</li>\n<li><code>length</code>: The length of the path</li>\n</ul>\n\n<p>Required Arguments:</p></li>\n<li><p><code>origin_node</code></p>\n\n<ul>\n<li>Type: dict of int | float</li>\n<li>What: A dictionary with the keys 'x' and 'y'</li>\n<li>Alternatively, a tuple or list of two values (x, y) can be used</li>\n</ul></li>\n<li><code>destination_node</code>\n<ul>\n<li>Type: dict of int | float</li>\n<li>What: A dictionary with the keys 'x' and 'y'</li>\n<li>Alternatively, a tuple or list of two values (x, y) can be used</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>output_coordinate_path</code>\n<ul>\n<li>Type: str</li>\n<li>What: The format of the output coordinate path</li>\n<li>Default: 'list_of_lists'</li>\n<li>Options:\n<ul>\n<li><code>list_of_tuples</code>: A list of tuples with the first value being x and the second being y</li>\n<li>'list_of_dicts': A list of dictionaries with keys 'x' and 'y'</li>\n<li>'list_of_lists': A list of lists with the first value being x and the second being y</li>\n</ul></li>\n</ul></li>\n<li><code>cache</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to cache the spanning tree for future use</li>\n<li>Default: False</li>\n</ul></li>\n<li><code>cache_for</code>\n<ul>\n<li>Type: str</li>\n<li>What: Whether to cache the spanning tree for the origin or destination node if <code>cache</code> is True</li>\n<li>Default: 'origin'</li>\n<li>Options: 'origin', 'destination'</li>\n</ul></li>\n<li><code>output_path</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to output the path as a list of graph idxs (mostly for debugging purposes)</li>\n<li>Default: False</li>\n</ul></li>\n<li><code>**kwargs</code>\n<ul>\n<li>Additional keyword arguments. These are included for forwards and backwards compatibility reasons, but are not currently used.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">origin_node</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">destination_node</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">output_coordinate_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list_of_dicts&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cache_for</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;origin&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.grid.GridGraph.get_coordinate_path", "modulename": "scgraph.grid", "qualname": "GridGraph.get_coordinate_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Return a list of node dictionaries (lat + long) in the order they are visited</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>path</code>\n<ul>\n<li>Type: list</li>\n<li>What: A list of node ids in the order they are visited</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>output_coordinate_path</code>\n<ul>\n<li>Type: str</li>\n<li>What: The format of the output coordinate path</li>\n<li>Default: 'list_of_dicts'</li>\n<li>Options:\n<ul>\n<li>'list_of_dicts': A list of dictionaries with keys 'x' and 'y'</li>\n<li>'list_of_lists': A list of lists with the first value being x and the second being y</li>\n<li><code>list_of_tuples</code>: A list of tuples with the first value being x and the second being y</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>coordinate_path</code>\n<ul>\n<li>Type: list</li>\n<li>What: A list of dictionaries with keys 'x' and 'y' in the order they are visited</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">output_coordinate_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list_of_dicts&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.grid.GridGraph.export_object", "modulename": "scgraph.grid", "qualname": "GridGraph.export_object", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Export the graph as a list of dictionaries</li>\n</ul>\n\n<p>Arguments:</p>\n\n<ul>\n<li><code>filename</code>\n<ul>\n<li>Type: str</li>\n<li>What: The name of the file to export the graph to.</li>\n<li>An extension of .gridgraph will be added to the file name if not already present</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>include_blocks</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to include the blocks in the export</li>\n<li>Default: False</li>\n<li>Note: This is not needed as the graph is already created</li>\n<li>Note: You can include blocks in the export if you need them for some reason\n<ul>\n<li>This will be set as the blocks attribute in the imported object</li>\n<li>This will increase the size of the export file</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">include_blocks</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.grid.GridGraph.import_object", "modulename": "scgraph.grid", "qualname": "GridGraph.import_object", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>A staticmethod to import the graph from a file</li>\n</ul>\n\n<p>Arguments:</p>\n\n<ul>\n<li><code>filename</code>\n<ul>\n<li>Type: str</li>\n<li>What: The name of the file to import the graph from.</li>\n<li>An extension of .gridgraph will be added to the file name if not already present</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li><code>GridGraph</code>\n<ul>\n<li>Type: GridGraph</li>\n<li>What: The imported graph object</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.helpers", "modulename": "scgraph.helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.helpers.shape_mover_utils", "modulename": "scgraph.helpers.shape_mover_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils.moving_segment_overlap_intervals", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils.moving_segment_overlap_intervals", "kind": "function", "doc": "<p>Calculates the time intervals during which a moving 1D line segment overlaps with each unit-length\ninteger-aligned range along the x-axis.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>seg_start (int|float): Initial position of the left end of the line segment.</li>\n<li>seg_end (int|float): Initial position of the right end of the line segment.</li>\n<li>t_start (int|float): Start time of the motion.</li>\n<li>t_end (int|float): End time of the motion.</li>\n<li>shift (int|float): Total distance the line segment moves along the x-axis during [t_start, t_end].</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict[int, tuplie(int|float,int|float)]: A dictionary mapping each integer <code>i</code> to the time interval [t_in, t_out]\nduring which any part of the line overlaps the range [i, i+1).\nOnly includes ranges with non-zero overlap duration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">seg_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">seg_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">t_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">t_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">shift</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils.moving_rectangle_overlap_intervals", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils.moving_rectangle_overlap_intervals", "kind": "function", "doc": "<p>Calculates the time intervals during which a moving rectangle overlaps with each unit-length\ninteger-aligned range along the x and y axes.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>x_start (float|int): Initial position of the left end of the rectangle along the x-axis.</li>\n<li>x_end (float|int): Initial position of the right end of the rectangle along the x-axis.</li>\n<li>y_start (float|int): Initial position of the bottom end of the rectangle along the y-axis.</li>\n<li>y_end (float|int): Initial position of the top end of the rectangle along the y-axis.</li>\n<li>x_shift (float|int): Total distance the rectangle moves along the x-axis during [t_start, t_end].</li>\n<li>y_shift (float|int): Total distance the rectangle moves along the y-axis during [t_start, t_end].</li>\n<li>t_start (float|int): Start time of the motion.</li>\n<li>t_end (float|int): End time of the motion.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict[tuple(int,int),tuple(int|float,int|float)]: A dictionary mapping each integer (i,j) to the time interval [t_in, t_out]\nduring which any part of the rectangle overlaps the range [i, i+1) x [j, j+1).\nOnly includes ranges with non-zero overlap duration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_start</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">x_end</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y_start</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y_end</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">x_shift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y_shift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">t_start</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">t_end</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils.argmin", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils.argmin", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lst</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils.argmax", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils.argmax", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lst</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils.find_extreme_orthogonal_vertices", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils.find_extreme_orthogonal_vertices", "kind": "function", "doc": "<p>Finds the points in a list that are the furthest apart in the direction\northogonal to the given slope. This is useful for finding the extreme\npoints in a set of 2D coordinates that are orthogonal to a given line.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>points (list of tuples): A list of (x, y) coordinates.</li>\n<li>slope (float): The slope of the line.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>tuple: The points with the minimum and maximum projections.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>, </span><span class=\"param\"><span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils.find_extreme_orthogonal_vertices_simplified", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils.find_extreme_orthogonal_vertices_simplified", "kind": "function", "doc": "<p>A simplified version of the function <code>find_extreme_orthogonal_vertices</code>\nthat assumes the slope is never 0.</p>\n\n<p>Finds the points in a list that are the furthest apart in the direction\northogonal to the given slope. This is useful for finding the extreme\npoints in a set of 2D coordinates that are orthogonal to a given line.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>points (list of tuples): A list of (x, y) coordinates.</li>\n<li>slope (float): The slope of the line.\n<ul>\n<li>Note: This should never be 0 or infinite for this function.</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>tuple: The points with the minimum and maximum projections.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>, </span><span class=\"param\"><span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils.remove_untouched_intervals", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils.remove_untouched_intervals", "kind": "function", "doc": "<p>Removes unnecessary intervals from the dictionary of intervals.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>intervals (dict[tuple(int,int),tuple(int|float,int|float)]): A dictionary mapping each integer (i,j) to the time interval [t_in, t_out]\nduring which any part of the shape overlaps the range [i, i+1) x [j, j+1).</li>\n<li>slope (float|int): The slope of the line.</li>\n<li>absolute_shape (list(tuple[int|float, int|float])): A list of coordinates representing the shape's vertices relative to its center.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict[tuple(int,int),tuple(int|float,int|float)]: A dictionary with unnecessary intervals removed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">intervals</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">slope</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">absolute_shape</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.helpers.shape_mover_utils.ShapeMoverUtils.moving_shape_overlap_intervals", "modulename": "scgraph.helpers.shape_mover_utils", "qualname": "ShapeMoverUtils.moving_shape_overlap_intervals", "kind": "function", "doc": "<p>Calculates the time intervals during which a moving shape overlaps with each unit-length\ninteger-aligned range along the x and y axes.</p>\n\n<p>Note: This converts each shape into a full bounding box rectangle and then uses the rectangle overlap function to calculate the intervals.</p>\n\n<p>Args:</p>\n\n<ul>\n<li>x_coord (float|int): Initial x-coordinate of the shape's center.</li>\n<li>y_coord (float|int): Initial y-coordinate of the shape's center.</li>\n<li>x_shift (float|int): Total distance the shape moves along the x-axis during [t_start, t_end].</li>\n<li>y_shift (float|int): Total distance the shape moves along the y-axis during [t_start, t_end].</li>\n<li>t_start (float|int): Start time of the motion.</li>\n<li>t_end (float|int): End time of the motion.</li>\n<li>shape (list[list[float|int]]): List of coordinates representing the shape's vertices relative to its center.</li>\n<li>cell_density (int): The number of cells per unit of length.</li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>dict[tuple(int,int),tuple(int|float,int|float)]: A dictionary mapping each integer (i,j) to the time interval [t_in, t_out]\nduring which any part of the shape overlaps the range [i, i+1) x [j, j+1).\nOnly includes ranges with non-zero overlap duration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y_coord</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">x_shift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y_shift</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">t_start</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">t_end</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">shape</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">cell_density</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.spanning", "modulename": "scgraph.spanning", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.spanning.SpanningTree", "modulename": "scgraph.spanning", "qualname": "SpanningTree", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "scgraph.spanning.SpanningTree.makowskis_spanning_tree", "modulename": "scgraph.spanning", "qualname": "SpanningTree.makowskis_spanning_tree", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Calculate the spanning tree of a graph using Makowski's modified Dijkstra algorithm\n<ul>\n<li>Modifications allow for a sparse distance matrix to be used instead of a dense distance matrix</li>\n<li>Improvements include only computing future potential nodes based on the open leaves for each branch\n<ul>\n<li>Open leaves are nodes that have not been visited yet but are adjacent to other visited nodes</li>\n</ul></li>\n<li>This can dramatically reduce the memory and compute requirements of the algorithm</li>\n<li>For particularly sparse graphs, this algorithm runs close to O(n log n) time\n<ul>\n<li>Where n is the number of nodes in the graph</li>\n</ul></li>\n<li>For dense graphs, this algorithm runs closer to O(n^2) time (similar to the standard Dijkstra algorithm)\n<ul>\n<li>Where n is the number of nodes in the graph</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>:\n<ul>\n<li>Type: list of dictionaries</li>\n<li>See: <a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\"><a href=\"https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph\">https://connor-makowski.github.io/scgraph/scgraph/core.html#GeoGraph</a></a></li>\n</ul></li>\n<li><code>node_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the node from which to calculate the spanning tree</li>\n</ul></li>\n</ul>\n\n<p>Returns:</p>\n\n<ul>\n<li>A dictionary with the following keys:\n<ul>\n<li><code>node_id</code>: The id of the node from which the spanning tree was calculated</li>\n<li><code>predecessors</code>: A list of node ids referring to the predecessor of each node given the spanning tree\n<ul>\n<li>Note: For disconnected graphs, nodes that are not connected to the origin node will have a predecessor of None</li>\n</ul></li>\n<li><code>distance_matrix</code>: A list of distances from the origin node to each node in the graph\n<ul>\n<li>Note: For disconnected graphs, nodes that are not connected to the origin node will have a distance of float(\"inf\")</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">node_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.spanning.SpanningTree.get_path", "modulename": "scgraph.spanning", "qualname": "SpanningTree.get_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Get the path from the origin node to the destination node using the provided spanning tree\n<ul>\n<li>Note: This will only guarantee an optimal path if either the origin or destination node is the same as the node_id in the spanning tree and that the graph is symmetric</li>\n</ul></li>\n<li>Return a list of node ids in the order they are visited</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>origin_idx</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the origin node from the graph dictionary to start the shortest path from</li>\n</ul></li>\n<li><code>destination_idx</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n<li><code>spanning_tree</code>\n<ul>\n<li>Type: dict</li>\n<li>What: The output from the makowskis_spanning_tree function</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">origin_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">destionation_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">spanning_tree</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.utils", "modulename": "scgraph.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.utils.haversine", "modulename": "scgraph.utils", "qualname": "haversine", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Calculate the great circle distance in kilometers between two points on the earth (specified in decimal degrees)</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>origin</code>:\n<ul>\n<li>Type: list of two floats | ints</li>\n<li>What: The origin point as a list of \"latitude\" and \"longitude\"</li>\n</ul></li>\n<li><code>destination</code>:\n<ul>\n<li>Type: list of two floats | ints</li>\n<li>What: The destination point as a list of \"latitude\" and \"longitude\"</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>units</code>:\n<ul>\n<li>Type: str</li>\n<li>What: units to return the distance in? (one of \"km\", \"m\", \"mi\", or \"ft\")</li>\n<li>Default: \"km\"</li>\n</ul></li>\n<li><code>circuity</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: Multiplier to increase the calculated distance (to account for circuity)</li>\n<li>Default: 1</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">origin</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;km&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">circuity</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.utils.hard_round", "modulename": "scgraph.utils", "qualname": "hard_round", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Round a number to a specified number of decimal places</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>decimal_places</code>:\n<ul>\n<li>Type: int</li>\n<li>What: number of decimal places to round to</li>\n</ul></li>\n<li><code>a</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: number to round</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">decimal_places</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.utils.distance_converter", "modulename": "scgraph.utils", "qualname": "distance_converter", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Convert a distance from one unit to another</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>distance</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: distance to convert</li>\n</ul></li>\n<li><code>input_units</code>:\n<ul>\n<li>Type: str</li>\n<li>What: units of the input distance (one of \"mi\", \"km\", \"m\", or \"ft\")</li>\n</ul></li>\n<li><code>output_units</code>:\n<ul>\n<li>Type: str</li>\n<li>What: units of the output distance (one of \"mi\", \"km\", \"m\", or \"ft\")</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">distance</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">input_units</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">output_units</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.utils.get_line_path", "modulename": "scgraph.utils", "qualname": "get_line_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Convert a <code>get_shortest_path</code> output into a GeoJSON LineString dictionary object</li>\n<li>Optionally save the output to a file</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>output</code>:\n<ul>\n<li>Type: list | dict</li>\n<li>What: output of <code>get_shortest_path</code></li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>filename</code>:\n<ul>\n<li>Type: str</li>\n<li>What: path to save the output to</li>\n<li>Default: None</li>\n<li>Note: if <code>filename</code> is not None, the output will be saved to the specified path</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\">output: [&lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;], </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();