window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "scgraph", "modulename": "scgraph", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.core", "modulename": "scgraph.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.Graph", "modulename": "scgraph.core", "qualname": "Graph", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.Graph.validate_graph", "modulename": "scgraph.core", "qualname": "Graph.validate_graph", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Validate that a graph is properly formatted</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>\n<ul>\n<li>Type: list of dictionaries</li>\n<li>What: A list of dictionaries where the indicies are origin node ids and the values are dictionaries of destination node indices and distances</li>\n<li>Note: All nodes must be included as origins in the graph regardless of if they have any connected destinations</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>check_symmetry</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to check that the graph is symmetric</li>\n<li>Default: True</li>\n<li>Note: This is forced to True if <code>check_connected</code> is True</li>\n</ul></li>\n<li><code>check_connected</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to check that the graph is fully connected</li>\n<li>Default: True</li>\n<li>Note: For computational efficiency, only symmetric graphs are checked for connectivity</li>\n<li>Note: If this is True, <code>check_symmetry</code> is forced to True and the graph will be checked for symmetry prior to checking for connectivity</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">check_symmetry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">check_connected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.Graph.validate_connected", "modulename": "scgraph.core", "qualname": "Graph.validate_connected", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Validate that a graph is fully connected\n<ul>\n<li>This means that every node in the graph has a path to every other node in the graph</li>\n<li>Note: This assumes that the graph is symmetric</li>\n</ul></li>\n<li>Return True if the graph is fully connected and False if it is not</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>\n<ul>\n<li>Type: list of dictionaries</li>\n<li>What: A list of dictionaries where the indicies are origin node ids and the values are dictionaries of destination node ids and distances</li>\n<li>Note: All nodes must be included as origins in the graph regardless of if they have any connected destinations</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.Graph.input_check", "modulename": "scgraph.core", "qualname": "Graph.input_check", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Check that the inputs passed to the shortest path algorithm are valid</li>\n<li>Raises an exception if the inputs passed are not valid</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>\n<ul>\n<li>Type: list[dict]</li>\n<li>What: A list of dictionaries where the indicies are origin node ids and the values are dictionaries of destination node ids and distances</li>\n</ul></li>\n<li><code>origin_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the origin node from the graph dictionary to start the shortest path from</li>\n</ul></li>\n<li><code>destination_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">origin_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">destination_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.Graph.dijkstra", "modulename": "scgraph.core", "qualname": "Graph.dijkstra", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Identify the shortest path between two nodes in a sparse network graph using a modified dijkstra algorithm\n<ul>\n<li>Modifications allow for a sparse distance matrix to be used instead of a dense distance matrix</li>\n<li>This can dramatically reduce the memory and compute requirements of the algorithm</li>\n<li>This algorithm runs in O(n^2) time where n is the number of nodes in the graph</li>\n</ul></li>\n<li>Return a dictionary of various path information including:\n<ul>\n<li><code>id_path</code>: A list of node ids in the order they are visited</li>\n<li><code>path</code>: A list of node dictionaries (lat + long) in the order they are visited</li>\n</ul></li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>\n<ul>\n<li>Type: list[dict]</li>\n<li>What: A list of dictionaries where the indicies are origin node ids and the values are dictionaries of destination node ids and distances</li>\n</ul></li>\n<li><code>origin_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the origin node from the graph dictionary to start the shortest path from</li>\n</ul></li>\n<li><code>destination_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">origin_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">destination_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.Graph.dijkstra_makowski", "modulename": "scgraph.core", "qualname": "Graph.dijkstra_makowski", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Identify the shortest path between two nodes in a sparse network graph using Makowski's modified Dijkstra algorithm\n<ul>\n<li>Modifications allow for a sparse distance matrix to be used instead of a dense distance matrix</li>\n<li>Improvements include only computing future potential nodes based on the open leaves for each branch\n<ul>\n<li>Open leaves are nodes that have not been visited yet but are adjacent to other visited nodes</li>\n</ul></li>\n<li>This can dramatically reduce the memory and compute requirements of the algorithm</li>\n<li>For particularly sparse graphs, this algorithm runs close to O(n) time\n<ul>\n<li>Where n is the number of nodes in the graph</li>\n</ul></li>\n<li>For dense graphs, this algorithm runs in O(n^2) time\n<ul>\n<li>Where n is the number of nodes in the graph</li>\n</ul></li>\n</ul></li>\n<li>Return a dictionary of various path information including:\n<ul>\n<li><code>id_path</code>: A list of node ids in the order they are visited</li>\n<li><code>path</code>: A list of node dictionaries (lat + long) in the order they are visited</li>\n</ul></li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>\n<ul>\n<li>Type: list[dict]</li>\n<li>What: A list of dictionaries where the indicies are origin node ids and the values are dictionaries of destination node ids and distances</li>\n</ul></li>\n<li><code>origin_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the origin node from the graph dictionary to start the shortest path from</li>\n</ul></li>\n<li><code>destination_id</code>\n<ul>\n<li>Type: int</li>\n<li>What: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">origin_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">destination_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph", "modulename": "scgraph.core", "qualname": "GeoGraph", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.GeoGraph.__init__", "modulename": "scgraph.core", "qualname": "GeoGraph.__init__", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Create a GeoGraph object</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>graph</code>\n<ul>\n<li>Type: list of dictionaries</li>\n<li>What: A list of dictionaries where the indicies are origin node ids and the values are dictionaries of destination node indices and distances</li>\n<li>Note: All nodes must be included as origins in the graph regardless of if they have any connected destinations</li>\n</ul></li>\n<li><code>nodes</code>\n<ul>\n<li>Type: list of lists</li>\n<li>What: A list of lists where the values are coordinates (latitude then longitude)</li>\n<li>Note: The length of the nodes list must be the same as that of the graph list</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">graph</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">nodes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span>)</span>"}, {"fullname": "scgraph.core.GeoGraph.graph", "modulename": "scgraph.core", "qualname": "GeoGraph.graph", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.GeoGraph.nodes", "modulename": "scgraph.core", "qualname": "GeoGraph.nodes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "scgraph.core.GeoGraph.validate_graph", "modulename": "scgraph.core", "qualname": "GeoGraph.validate_graph", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Validate that self.graph is properly formatted (see Graph.validate_graph)</li>\n<li>Raises an exception if the graph is invalid</li>\n<li>Returns None if the graph is valid</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>check_symmetry</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to check that the graph is symmetric</li>\n<li>Default: True</li>\n<li>Note: This is forced to True if <code>check_connected</code> is True</li>\n</ul></li>\n<li><code>check_connected</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to check that the graph is fully connected</li>\n<li>Default: True</li>\n<li>Note: For computational efficiency, graphs are validated for symmetry prior to checking for connectivity</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check_symmetry</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">check_connected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.validate_nodes", "modulename": "scgraph.core", "qualname": "GeoGraph.validate_nodes", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Validate that self.nodes is properly formatted (see GeoGraph.__init__ docs for more details)</li>\n<li>Raises an exception if the nodes are invalid</li>\n<li>Returns None if the nodes are valid</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.get_shortest_path", "modulename": "scgraph.core", "qualname": "GeoGraph.get_shortest_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li><p>Identify the shortest path between two nodes in a sparse network graph</p></li>\n<li><p>Return a dictionary of various path information including:</p>\n\n<ul>\n<li><code>id_path</code>: A list of node ids in the order they are visited</li>\n<li><code>path</code>: A list of node dictionaries (lat + long) in the order they are visited</li>\n<li><code>length</code>: The length of the path</li>\n</ul>\n\n<p>Required Arguments:</p></li>\n<li><p><code>origin_node</code></p>\n\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary with the keys 'latitude' and 'longitude'</li>\n</ul></li>\n<li><code>destination_node</code>\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary with the keys 'latitude' and 'longitude'</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>output_units</code>\n<ul>\n<li>Type: str</li>\n<li>What: The units in which to return the length of the path</li>\n<li>Default: 'km'</li>\n<li>Options:\n<ul>\n<li>'km': Kilometers</li>\n<li>'m': Meters</li>\n<li>'mi': Miles</li>\n<li>'ft': Feet</li>\n</ul></li>\n</ul></li>\n<li><code>algorithm_fn</code>\n<ul>\n<li>Type: function | method</li>\n<li>What: The algorithm function to identify the shortest path</li>\n<li>Default: 'Graph.dijkstra_makowski'</li>\n<li>Options:\n<ul>\n<li>'Graph.dijkstra': A modified dijkstra algorithm that uses a sparse distance matrix to identify the shortest path</li>\n<li>'Graph.dijkstra_makowski': A modified dijkstra algorithm that uses a sparse distance matrix to identify the shortest path</li>\n<li>Any user defined algorithm that takes the arguments:\n<ul>\n<li><code>graph</code>: A dictionary of dictionaries where the keys are origin node ids and the values are dictionaries of destination node ids and distances</li>\n<li><code>origin</code>: The id of the origin node from the graph dictionary to start the shortest path from</li>\n<li><code>destination</code>: The id of the destination node from the graph dictionary to end the shortest path at</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><code>off_graph_circuity</code>\n<ul>\n<li>Type: float | int</li>\n<li>What: The circuity factor to apply to any distance calculations between your origin and destination nodes and their connecting nodes in the graph</li>\n<li>Default: 1</li>\n<li>Notes:\n<ul>\n<li>For alogrithmic solving purposes, the node_addition_circuity is applied to the origin and destination nodes when they are added to the graph</li>\n<li>This is only applied after an <code>optimal solution</code> using the <code>node_addition_circuity</code> has been found when it is then adjusted to equal the <code>off_graph_circuity</code></li>\n</ul></li>\n</ul></li>\n<li><code>node_addition_type</code>\n<ul>\n<li>Type: str</li>\n<li>What: The type of node addition to use when adding your origin node to the distance matrix</li>\n<li>Default: 'quadrant'</li>\n<li>Options:\n<ul>\n<li>'quadrant': Add the closest node in each quadrant (ne, nw, se, sw) to the distance matrix for this node</li>\n<li>'closest': Add only the closest node to the distance matrix for this node</li>\n<li>'all': Add all nodes to the distance matrix for this node</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li><code>dijkstra_makowski</code> will operate substantially faster if the <code>node_addition_type</code> is set to 'quadrant' or 'closest'</li>\n<li><code>dijkstra</code> will operate at the similar speeds regardless of the <code>node_addition_type</code></li>\n<li>When using <code>all</code>, you should consider using <code>dijkstra</code> instead of <code>dijkstra_makowski</code> as it will be faster</li>\n<li>The destination node is always added as 'all' regardless of the <code>node_addition_type</code> setting\n<ul>\n<li>This guarantees that any destination node will be connected to any origin node regardless of how or where the origin node is added to the graph</li>\n</ul></li>\n<li>If the passed graph is not a connected graph (meaning it is comprised of multiple disconnected networks)\n<ul>\n<li>The entrypoints generated using the <code>node_addition_type</code> will determine which disconnected networks will be used to calculate the <code>optimal route</code></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><code>node_addition_circuity</code>\n<ul>\n<li>Type: float | int</li>\n<li>What: The circuity factor to apply when adding your origin and destination nodes to the distance matrix</li>\n<li>Default: 4</li>\n<li>Note:\n<ul>\n<li>This defaults to 4 to prevent the algorithm from taking a direct route in direction of the destination over some impassible terrain (EG: a maritime network that goes through land)</li>\n<li>A higher value will push the algorithm to join the network at a closer node to avoid the extra distance from the circuity factor</li>\n<li>This is only relevant if <code>node_addition_type</code> is set to 'quadrant' or 'all' as it affects the choice on where to enter the graph network</li>\n<li>This factor is used to calculate the node sequence for the <code>optimal route</code>, however the reported <code>length</code> of the path will be calculated using the <code>off_graph_circuity</code> factor</li>\n</ul></li>\n</ul></li>\n<li><code>geograph_units</code>\n<ul>\n<li>Type: str</li>\n<li>What: The units of measurement in the geograph data</li>\n<li>Default: 'km'</li>\n<li>Options:\n<ul>\n<li>'km': Kilometers</li>\n<li>'m': Meters</li>\n<li>'mi': Miles</li>\n<li>'ft': Feet</li>\n</ul></li>\n<li>Note: In general, all scgraph provided geographs be in kilometers</li>\n</ul></li>\n<li><code>output_coordinate_path</code>\n<ul>\n<li>Type: str</li>\n<li>What: The format of the output coordinate path</li>\n<li>Default: 'list_of_lists'</li>\n<li>Options:\n<ul>\n<li>'list_of_dicts': A list of dictionaries with keys 'latitude' and 'longitude'</li>\n<li>'list_of_lists': A list of lists with the first value being latitude and the second being longitude</li>\n</ul></li>\n</ul></li>\n<li><code>output_path</code>\n<ul>\n<li>Type: bool</li>\n<li>What: Whether to output the path as a list of geograph node ids (for debugging and other advanced uses)</li>\n<li>Default: False</li>\n</ul></li>\n<li><code>**kwargs</code>\n<ul>\n<li>Additional keyword arguments. These are included for forwards and backwards compatibility reasons, but are not currently used.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">origin_node</span>,</span><span class=\"param\">\t<span class=\"n\">destination_node</span>,</span><span class=\"param\">\t<span class=\"n\">output_units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;km&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">algorithm_fn</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">Graph</span><span class=\"o\">.</span><span class=\"n\">dijkstra_makowski</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\toff_graph_circuity: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;] = 1,</span><span class=\"param\">\t<span class=\"n\">node_addition_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;quadrant&#39;</span>,</span><span class=\"param\">\tnode_addition_circuity: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;] = 4,</span><span class=\"param\">\t<span class=\"n\">geograph_units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;km&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_coordinate_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;list_of_lists&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.adujust_circuity_length", "modulename": "scgraph.core", "qualname": "GeoGraph.adujust_circuity_length", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Adjust the length of the path to account for the circuity factors applied to the origin and destination nodes</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>output</code>\n<ul>\n<li>Type: dict</li>\n<li>What: The output from the algorithm function</li>\n</ul></li>\n<li><code>node_addition_circuity</code>\n<ul>\n<li>Type: float | int</li>\n<li>What: The circuity factor that was applied when adding your origin and destination nodes to the distance matrix</li>\n</ul></li>\n<li><code>off_graph_circuity</code>\n<ul>\n<li>Type: float | int</li>\n<li>What: The circuity factor to apply to any distance calculations between your origin and destination nodes and their connecting nodes in the graph</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\tnode_addition_circuity: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;],</span><span class=\"param\">\toff_graph_circuity: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;]</span><span class=\"return-annotation\">) -> [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;]:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.get_coordinate_path", "modulename": "scgraph.core", "qualname": "GeoGraph.get_coordinate_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Return a list of node dictionaries (lat + long) in the order they are visited</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>path</code>\n<ul>\n<li>Type: list</li>\n<li>What: A list of node ids in the order they are visited</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.remove_appended_node", "modulename": "scgraph.core", "qualname": "GeoGraph.remove_appended_node", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Remove the last node that was appended to the graph</li>\n<li>Assumes that this node has symmetric flows\n<ul>\n<li>EG: If node A has a distance of 10 to node B, then node B has a distance of 10 to node A</li>\n</ul></li>\n<li>Return None</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li>None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.get_node_distances", "modulename": "scgraph.core", "qualname": "GeoGraph.get_node_distances", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Get the distances between a node and all other nodes in the graph</li>\n<li>This is used to determine the closest node to add to the graph when adding a new node</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>node</code>\n<ul>\n<li>Type: list</li>\n<li>What: A list of the latitude and longitude of the node</li>\n<li>EG: [latitude, longitude] -> [31.23, 121.47]</li>\n</ul></li>\n<li><code>circuity</code>\n<ul>\n<li>Type: float | int</li>\n<li>What: The circuity to apply to any distance calculations</li>\n<li>Note: This defaults to 4 to prevent the algorithm from taking a direct route in direction of the destination over some impassible terrain (EG: a maritime network that goes through land)</li>\n</ul></li>\n<li><code>node_addition_type</code>\n<ul>\n<li>Type: str</li>\n<li>What: The type of node addition to use</li>\n<li>Options:\n<ul>\n<li>'quadrant': Add the closest node in each quadrant (ne, nw, se, sw) to the distance matrix for this node</li>\n<li>'closest': Add only the closest node to the distance matrix for this node</li>\n<li>'all': Add all nodes to the distance matrix for this node</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li><code>dijkstra_makowski</code> will operate substantially faster if the <code>node_addition_type</code> is set to 'quadrant' or 'closest'</li>\n<li><code>dijkstra</code> will operate at the similar speeds regardless of the <code>node_addition_type</code></li>\n<li>When using <code>all</code>, you should consider using <code>dijkstra</code> instead of <code>dijkstra_makowski</code> as it will be faster</li>\n</ul></li>\n</ul></li>\n<li><code>node_addition_math</code>\n<ul>\n<li>Type: str</li>\n<li>What: The math to use when calculating the distance between nodes when determining the closest node (or closest quadrant node) to add to the graph</li>\n<li>Default: 'euclidean'</li>\n<li>Options:\n<ul>\n<li>'euclidean': Use the euclidean distance between nodes. This is much faster but is not accurate (especially near the poles)</li>\n<li>'haversine': Use the haversine distance between nodes. This is slower but is an accurate representation of the surface distance between two points on the earth</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li>Once the closest node (or closest quadrant node) is determined, the haversine distance (with circuity) is used to calculate the distance between the nodes when adding it to the graph.</li>\n</ul></li>\n</ul></li>\n<li><code>lat_lon_bound</code>\n<ul>\n<li>Type: float | int</li>\n<li>What: Forms a bounding box around the node that is to be added to graph. Only selects graph nodes to consider joining that are within this bounding box.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\tcircuity: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">node_addition_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_math</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\tlat_lon_bound: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;]</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.add_node", "modulename": "scgraph.core", "qualname": "GeoGraph.add_node", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Add a node to the network</li>\n<li>Returns the id of the new node</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>node</code>\n<ul>\n<li>Type: dict</li>\n<li>What: A dictionary with the keys 'latitude' and 'longitude'</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>circuity</code>\n<ul>\n<li>Type: float | int</li>\n<li>What: The circuity to apply to any distance calculations</li>\n<li>Default: 4</li>\n<li>Note: This defaults to 4 to prevent the algorithm from taking a direct route in direction of the destination over some impassible terrain (EG: a maritime network that goes through land)</li>\n</ul></li>\n<li><code>node_addition_type</code>\n<ul>\n<li>Type: str</li>\n<li>What: The type of node addition to use</li>\n<li>Default: 'quadrant'</li>\n<li>Options:\n<ul>\n<li>'quadrant': Add the closest node in each quadrant (ne, nw, se, sw) to the distance matrix for this node</li>\n<li>'closest': Add only the closest node to the distance matrix for this node</li>\n<li>'all': Add all nodes to the distance matrix for this node</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li><code>dijkstra_makowski</code> will operate substantially faster if the <code>node_addition_type</code> is set to 'quadrant' or 'closest'</li>\n<li><code>dijkstra</code> will operate at the similar speeds regardless of the <code>node_addition_type</code></li>\n<li>When using <code>all</code>, you should consider using <code>dijkstra</code> instead of <code>dijkstra_makowski</code> as it will be faster</li>\n</ul></li>\n</ul></li>\n<li><code>node_addition_math</code>\n<ul>\n<li>Type: str</li>\n<li>What: The math to use when calculating the distance between nodes when determining the closest node (or closest quadrant node) to add to the graph</li>\n<li>Default: 'euclidean'</li>\n<li>Options:\n<ul>\n<li>'euclidean': Use the euclidean distance between nodes. This is much faster but is not accurate (especially near the poles)</li>\n<li>'haversine': Use the haversine distance between nodes. This is slower but is an accurate representation of the surface distance between two points on the earth</li>\n</ul></li>\n<li>Notes:\n<ul>\n<li>Once the closest node (or closest quadrant node) is determined, the haversine distance (with circuity) is used to calculate the distance between the nodes when adding it to the graph.</li>\n</ul></li>\n</ul></li>\n<li><code>lat_lon_bound</code>\n<ul>\n<li>Type: float | int</li>\n<li>What: Forms a bounding box around the node that is to be added to graph. Only selects graph nodes to consider joining that are within this bounding box.</li>\n<li>Default: 5</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\tcircuity: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">node_addition_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;quadrant&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">node_addition_math</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;euclidean&#39;</span>,</span><span class=\"param\">\tlat_lon_bound: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;] = 5</span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.core.GeoGraph.save_as_geojson", "modulename": "scgraph.core", "qualname": "GeoGraph.save_as_geojson", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Save the current geograph object as a geojson file specifed by <code>filename</code></li>\n<li>This is useful for understanding the underlying geograph and for debugging purposes</li>\n<li>Returns None</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>filename</code>\n<ul>\n<li>Type: str</li>\n<li>What: The filename to save the geojson file as</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "scgraph.utils", "modulename": "scgraph.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "scgraph.utils.haversine", "modulename": "scgraph.utils", "qualname": "haversine", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Calculate the great circle distance in kilometers between two points on the earth (specified in decimal degrees)</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>origin</code>:\n<ul>\n<li>Type: list of two floats | ints</li>\n<li>What: The origin point as a list of \"longitude\" and \"latitude\"</li>\n</ul></li>\n<li><code>destination</code>:\n<ul>\n<li>Type: list of two floats | ints</li>\n<li>What: The destination point as a list of \"longitude\" and \"latitude\"</li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>units</code>:\n<ul>\n<li>Type: str</li>\n<li>What: units to return the distance in? (one of \"km\", \"m\", \"mi\", or \"ft\")</li>\n<li>Default: \"km\"</li>\n</ul></li>\n<li><code>circuity</code>:\n<ul>\n<li>Type: float | int</li>\n<li>What: Multiplier to increase the calculated distance (to account for circuity)</li>\n<li>Default: 1</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">origin</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">destination</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">units</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;km&#39;</span>,</span><span class=\"param\">\tcircuity: [&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;] = 1</span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.utils.hard_round", "modulename": "scgraph.utils", "qualname": "hard_round", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Round a number to a specified number of decimal places</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>decimal_places</code>:\n<ul>\n<li>Type: int</li>\n<li>What: number of decimal places to round to</li>\n</ul></li>\n<li><code>a</code>:\n<ul>\n<li>Type: float | int</li>\n<li>What: number to round</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">decimal_places</span>, </span><span class=\"param\"><span class=\"n\">a</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.utils.distance_converter", "modulename": "scgraph.utils", "qualname": "distance_converter", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Convert a distance from one unit to another</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>distance</code>:\n<ul>\n<li>Type: int | float</li>\n<li>What: distance to convert</li>\n</ul></li>\n<li><code>input_units</code>:\n<ul>\n<li>Type: str</li>\n<li>What: units of the input distance (one of \"mi\", \"km\", \"m\", or \"ft\")</li>\n</ul></li>\n<li><code>output_units</code>:\n<ul>\n<li>Type: str</li>\n<li>What: units of the output distance (one of \"mi\", \"km\", \"m\", or \"ft\")</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tdistance: [&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;],</span><span class=\"param\">\t<span class=\"n\">input_units</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_units</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "scgraph.utils.get_line_path", "modulename": "scgraph.utils", "qualname": "get_line_path", "kind": "function", "doc": "<p>Function:</p>\n\n<ul>\n<li>Convert a <code>get_shortest_path</code> output into a GeoJSON LineString dictionary object</li>\n<li>Optionally save the output to a file</li>\n</ul>\n\n<p>Required Arguments:</p>\n\n<ul>\n<li><code>output</code>:\n<ul>\n<li>Type: list | dict</li>\n<li>What: output of <code>get_shortest_path</code></li>\n</ul></li>\n</ul>\n\n<p>Optional Arguments:</p>\n\n<ul>\n<li><code>filename</code>:\n<ul>\n<li>Type: str</li>\n<li>What: path to save the output to</li>\n<li>Default: None</li>\n<li>Note: if <code>filename</code> is not None, the output will be saved to the specified path</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();